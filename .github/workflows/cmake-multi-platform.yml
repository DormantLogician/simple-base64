name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
          description: 'Log level'
          required: true
          default: 'warning'
          type: choice
          options:
          - info
          - warning
          - debug

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up virtual environment
      shell: bash
      run: python3 -m venv virtualenv

    - name: Install Conan
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && pip3 install conan && conan profile detect
        else
          source virtualenv/bin/activate && pip3 install conan && conan profile detect
        fi

    - name: Install NSIS
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          choco install nsis
        fi

    - name: Configure Conan
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && conan config install util/ci/conan/windows-latest && conan install . --build=missing
        elif [ "$RUNNER_OS" == "Linux" ]; then
          if [ ${{ matrix.c_compiler }} == "gcc" ]; then
            source virtualenv/bin/activate && conan config install util/ci/conan/ubuntu-latest-gcc && conan install . --build=missing
          else
            source virtualenv/bin/activate && conan config install util/ci/conan/ubuntu-latest-clang && conan install . --build=missing
          fi
        else
          if [ ${{ matrix.c_compiler }} == "gcc" ]; then
            source virtualenv/bin/activate && conan config install util/ci/conan/macos-latest-gcc && conan install . --build=missing
          else
            source virtualenv/bin/activate && conan config install util/ci/conan/macos-latest-clang && conan install . --build=missing
          fi
        fi

    - name: Configure CMake
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && cmake --preset conan-default
        else
          source virtualenv/bin/activate && cmake --preset conan-release
        fi

    - name: Build project
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && cmake --build --preset conan-release --config Release
        else
          source virtualenv/bin/activate && cmake --build --preset conan-release --config Release
        fi

    - name: Test project
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && ctest --preset conan-release -C Release
        else
          source virtualenv/bin/activate && ctest --preset conan-release -C Release
        fi

    - name: Package project
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          virtualenv/Scripts/activate && cpack -G "NSIS" --config built/Release/CPackConfig.cmake && cpack -G "ZIP" --config built/Release/CPackSourceConfig.cmake
        elif [ "$RUNNER_OS" == "Linux"]; then
          source virtualenv/bin/activate && cpack -G "DEB" --config built/Release/CPackConfig.cmake && cpack -G "ZIP" --config built/Release/CPackSourceConfig.cmake
        elif [ "$RUNNER_OS" == "macOS"]; then
          source virtualenv/bin/activate && cpack -G "DragNDrop" --config built/Release/CPackConfig.cmake && cpack -G "ZIP" --config built/Release/CPackSourceConfig.cmake
        fi

